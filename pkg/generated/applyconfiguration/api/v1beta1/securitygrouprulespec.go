/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	apiv1beta1 "sigs.k8s.io/cluster-api-provider-openstack/api/v1beta1"
)

// SecurityGroupRuleSpecApplyConfiguration represents a declarative configuration of the SecurityGroupRuleSpec type for use
// with apply.
type SecurityGroupRuleSpecApplyConfiguration struct {
	Name                *string                               `json:"name,omitempty"`
	Description         *string                               `json:"description,omitempty"`
	Direction           *string                               `json:"direction,omitempty"`
	EtherType           *string                               `json:"etherType,omitempty"`
	PortRangeMin        *int                                  `json:"portRangeMin,omitempty"`
	PortRangeMax        *int                                  `json:"portRangeMax,omitempty"`
	Protocol            *string                               `json:"protocol,omitempty"`
	RemoteGroupID       *string                               `json:"remoteGroupID,omitempty"`
	RemoteIPPrefix      *string                               `json:"remoteIPPrefix,omitempty"`
	RemoteManagedGroups []apiv1beta1.ManagedSecurityGroupName `json:"remoteManagedGroups,omitempty"`
}

// SecurityGroupRuleSpecApplyConfiguration constructs a declarative configuration of the SecurityGroupRuleSpec type for use with
// apply.
func SecurityGroupRuleSpec() *SecurityGroupRuleSpecApplyConfiguration {
	return &SecurityGroupRuleSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *SecurityGroupRuleSpecApplyConfiguration) WithName(value string) *SecurityGroupRuleSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *SecurityGroupRuleSpecApplyConfiguration) WithDescription(value string) *SecurityGroupRuleSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithDirection sets the Direction field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Direction field is set to the value of the last call.
func (b *SecurityGroupRuleSpecApplyConfiguration) WithDirection(value string) *SecurityGroupRuleSpecApplyConfiguration {
	b.Direction = &value
	return b
}

// WithEtherType sets the EtherType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EtherType field is set to the value of the last call.
func (b *SecurityGroupRuleSpecApplyConfiguration) WithEtherType(value string) *SecurityGroupRuleSpecApplyConfiguration {
	b.EtherType = &value
	return b
}

// WithPortRangeMin sets the PortRangeMin field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortRangeMin field is set to the value of the last call.
func (b *SecurityGroupRuleSpecApplyConfiguration) WithPortRangeMin(value int) *SecurityGroupRuleSpecApplyConfiguration {
	b.PortRangeMin = &value
	return b
}

// WithPortRangeMax sets the PortRangeMax field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortRangeMax field is set to the value of the last call.
func (b *SecurityGroupRuleSpecApplyConfiguration) WithPortRangeMax(value int) *SecurityGroupRuleSpecApplyConfiguration {
	b.PortRangeMax = &value
	return b
}

// WithProtocol sets the Protocol field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Protocol field is set to the value of the last call.
func (b *SecurityGroupRuleSpecApplyConfiguration) WithProtocol(value string) *SecurityGroupRuleSpecApplyConfiguration {
	b.Protocol = &value
	return b
}

// WithRemoteGroupID sets the RemoteGroupID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RemoteGroupID field is set to the value of the last call.
func (b *SecurityGroupRuleSpecApplyConfiguration) WithRemoteGroupID(value string) *SecurityGroupRuleSpecApplyConfiguration {
	b.RemoteGroupID = &value
	return b
}

// WithRemoteIPPrefix sets the RemoteIPPrefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RemoteIPPrefix field is set to the value of the last call.
func (b *SecurityGroupRuleSpecApplyConfiguration) WithRemoteIPPrefix(value string) *SecurityGroupRuleSpecApplyConfiguration {
	b.RemoteIPPrefix = &value
	return b
}

// WithRemoteManagedGroups adds the given value to the RemoteManagedGroups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RemoteManagedGroups field.
func (b *SecurityGroupRuleSpecApplyConfiguration) WithRemoteManagedGroups(values ...apiv1beta1.ManagedSecurityGroupName) *SecurityGroupRuleSpecApplyConfiguration {
	for i := range values {
		b.RemoteManagedGroups = append(b.RemoteManagedGroups, values[i])
	}
	return b
}
