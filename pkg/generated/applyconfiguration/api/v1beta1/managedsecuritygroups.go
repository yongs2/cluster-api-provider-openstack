/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// ManagedSecurityGroupsApplyConfiguration represents a declarative configuration of the ManagedSecurityGroups type for use
// with apply.
type ManagedSecurityGroupsApplyConfiguration struct {
	AllNodesSecurityGroupRules          []SecurityGroupRuleSpecApplyConfiguration `json:"allNodesSecurityGroupRules,omitempty"`
	ControlPlaneNodesSecurityGroupRules []SecurityGroupRuleSpecApplyConfiguration `json:"controlPlaneNodesSecurityGroupRules,omitempty"`
	WorkerNodesSecurityGroupRules       []SecurityGroupRuleSpecApplyConfiguration `json:"workerNodesSecurityGroupRules,omitempty"`
	AllowAllInClusterTraffic            *bool                                     `json:"allowAllInClusterTraffic,omitempty"`
}

// ManagedSecurityGroupsApplyConfiguration constructs a declarative configuration of the ManagedSecurityGroups type for use with
// apply.
func ManagedSecurityGroups() *ManagedSecurityGroupsApplyConfiguration {
	return &ManagedSecurityGroupsApplyConfiguration{}
}

// WithAllNodesSecurityGroupRules adds the given value to the AllNodesSecurityGroupRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AllNodesSecurityGroupRules field.
func (b *ManagedSecurityGroupsApplyConfiguration) WithAllNodesSecurityGroupRules(values ...*SecurityGroupRuleSpecApplyConfiguration) *ManagedSecurityGroupsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAllNodesSecurityGroupRules")
		}
		b.AllNodesSecurityGroupRules = append(b.AllNodesSecurityGroupRules, *values[i])
	}
	return b
}

// WithControlPlaneNodesSecurityGroupRules adds the given value to the ControlPlaneNodesSecurityGroupRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ControlPlaneNodesSecurityGroupRules field.
func (b *ManagedSecurityGroupsApplyConfiguration) WithControlPlaneNodesSecurityGroupRules(values ...*SecurityGroupRuleSpecApplyConfiguration) *ManagedSecurityGroupsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithControlPlaneNodesSecurityGroupRules")
		}
		b.ControlPlaneNodesSecurityGroupRules = append(b.ControlPlaneNodesSecurityGroupRules, *values[i])
	}
	return b
}

// WithWorkerNodesSecurityGroupRules adds the given value to the WorkerNodesSecurityGroupRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the WorkerNodesSecurityGroupRules field.
func (b *ManagedSecurityGroupsApplyConfiguration) WithWorkerNodesSecurityGroupRules(values ...*SecurityGroupRuleSpecApplyConfiguration) *ManagedSecurityGroupsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithWorkerNodesSecurityGroupRules")
		}
		b.WorkerNodesSecurityGroupRules = append(b.WorkerNodesSecurityGroupRules, *values[i])
	}
	return b
}

// WithAllowAllInClusterTraffic sets the AllowAllInClusterTraffic field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowAllInClusterTraffic field is set to the value of the last call.
func (b *ManagedSecurityGroupsApplyConfiguration) WithAllowAllInClusterTraffic(value bool) *ManagedSecurityGroupsApplyConfiguration {
	b.AllowAllInClusterTraffic = &value
	return b
}
